{
  "cortes": [
    "Fundamentals",
    "Structures",
    "Array"
  ],
  "corte1": [
    {
      "icon": "mdi-gate-xnor",
      "title": "Fundamentals of logic",
      "link": "/fundamentalsView"
    },
    {
      "icon": "mdi-chart-line",
      "title": "Algorithms",
      "link": "/algorithmsView"
    },
    {
      "icon": "mdi-arrow-u-right-bottom-bold",
      "title": "Software life cycle",
      "link": "/softwareCycleView"
    },
    {
      "icon": "mdi-identifier",
      "title": "Identifiers",
      "link": "/identifiersView"
    },
    {
      "icon": "mdi-database",
      "title": "Type of data",
      "link": "/typeOfDataView"
    },
    {
      "icon": "mdi-plus-minus-variant",
      "title": "Types of operators",
      "link": "/typeOfOperatorsView"
    },
    {
      "icon": "mdi-vector-arrange-below",
      "title": "Sequential structure",
      "link": "/sequentialStructureView"
    },
    {
      "icon": "mdi-arrange-send-backward",
      "title": "Selective structure",
      "link": "/selectiveStructureView"
    }
  ],
  "corte2": [
    {
      "icon": "mdi-chart-line",
      "title": "Repetitive structure",
      "link": "/repetitiveStructureView"
    },
    {
      "icon": "mdi-variable",
      "title": "Global variables",
      "link": "/globalVariablesView"
    },
    {
      "icon": "mdi-function",
      "title": "Defined functions",
      "link": "/definedFuntionsView"
    }
  ],
  "corte3": [
    {
      "icon": "mdi-arrange-bring-to-front",
      "title": "List data type",
      "link": "/typeOfDataListView"
    },
    {
      "icon": "mdi-calculator-variant",
      "title": "Operations",
      "link": "/operationsView"
    },
    {
      "icon": "mdi-sitemap-outline",
      "title": "Loops",
      "link": "/loopsView"
    },
    {
      "icon": "mdi-view-list-outline",
      "title": "Parallel lists",
      "link": "/parallelListsView"
    },
    {
      "icon": "mdi-bookshelf",
      "title": "Bibliography",
      "link": "/bibliographyView"
    }
  ],
  "test": "Test what you have learned with the following activity:",
  "headerSection": {
    "title": "Universidad de Ibagu√©"
  },
  "principalPage": {
    "title": "Algorithmic logic",
    "paragraph": "Algorithmic logic is the fundamental basis of computer programming and process automation because it is the process of thinking logically and structuredly to develop an algorithm that can solve a specific problem.",
    "paragraph2": "Some of the reasons why algorithmic logic is important are:",
    "button": "Learn More",
    "list": [
      {
        "title": "Problem solving:",
        "text": "It allows complex problems to be approached and broken down into smaller, more manageable tasks. This way, the problem can be analyzed and solved more effectively and efficiently."
      },
      {
        "title": "Process optimization:",
        "text": "It helps optimize processes and automate repetitive tasks. By developing efficient algorithms, resources and time can be saved in the completion of tasks."
      },
      {
        "title": "Computer programming:",
        "text": "It is fundamental for computer programming. Computer programs are based on the writing of precise algorithms that describe the actions that the program should perform."
      },
      {
        "title": "System design:",
        "text": "Efficient and effective systems can be designed by using precise algorithms to describe the necessary processes and tasks."
      }
    ]
  },
  "fundamentalsPage": {
    "title": "Fundamentals of logic",
    "paragraph": "Logic is a science that studies the structure or forms of human thought (such as propositions, concepts and reasoning) to establish valid laws and principles to obtain points of view of truth.",
    "paragraph2": "Logic plays an important role in computer science (databases, computational complexity, programming languages, artificial intelligence, design and verification of hardware and software systems, etc.). It is definitely one of the fundamentals that provide the necessary maturity and agility to assimilate the concepts, languages, techniques and computer tools that will emerge in the future.",
    "paragraph3": "Test what you have learned so far with the following activity:",
    "button": "Learn More"
  },
  "algorithmPage": {
    "title": "Algorithms",
    "paragraph": "An algorithm is a set of instructions defined, ordered and delimited to solve a problem, to make a calculation or to develop a task from an initial state and information, a series of ordered steps are followed to reach the solution of a situation. We use numerous algorithms to solve problems in our daily lives, such as: ",
    "paragraph2": "A computer algorithm starts from an initial state and some input values, it follows a series of successive steps and arrives at a final state in which it has found a solution. In this sense the three parts of an algorithm are: ",
    "paragraphTitleList1": "Input.",
    "paragraphTitleList2": "Processes.",
    "paragraphTitleList3": "Output Results.",
    "paragraphList1": "Information that we give to the algorithm to work with to provide the expected solution. ",
    "paragraphList2": "Set of steps to arrive at the solution of the situation from the input data. ",
    "paragraphList3": "From the transformation of the input values during the process."
  },
  "softwareLifeCyclePage": {
    "title": "Software Life Cycle and Analysis and Design Process for Problem Solving",
    "paragraph": "In 1945, the mathematician George Polya wrote the first book describing the use of heuristic techniques in problem solving. In this book called How to solve it, the stages that are a reflection of the process that is followed at the time of solving any type of problem are presented. These stages are:",
    "list": [
      "Understanding the problem (analysis)",
      "Propose a possible solution, considering alternative solutions (design)",
      "Carrying out the proposed solution (implementation)",
      "Verify that the result obtained is correct (testing)"
    ],
    "paragraph2": "With the above, any software goes through a series of phases throughout its life. Its life cycle comprises a series of stages among which are the stages for the process of analysis and design for the solution of problems and the following ones:",
    "list2": [
      {
        "title": "Planning: ",
        "text": "This initial phase of any project includes activities such as determining the scope of the project, conducting a feasibility study, analyzing the risks associated with the project, estimating the cost of the project, planning its timing and allocating resources to the various stages of the project."
      },
      {
        "title": "Analysis: ",
        "text": "Is the process by which you try to find out what you really need and come to a proper understanding of the system requirements. This stage is of great importance because if you do not know precisely what you need, you will not be able to carry out the development process."
      },
      {
        "title": "Design: ",
        "text": "The models used in the design phase represent the characteristics of the system that will allow us to implement it effectively, in other words, in this stage we define how the development will be done and what will be implemented to carry it out. The design is a complex stage and the design process has to be carried out iteratively."
      },
      {
        "title": "Implementation: ",
        "text": "Before starting to write a line of code or create a table in our database, it is of great importance to have a good understanding of the problem to be solved and to have applied basic design principles that will allow us to build quality software. For this phase, it is necessary to select the appropriate tools, a development environment that facilitates the work and an appropriate programming language for the type of system to be built. The choice of these tools will depend largely on the design decisions that have been made."
      },
      {
        "title": "Tests: ",
        "text": "The objective of this stage is to detect errors that may have been made in the previous stages of the project and to correct them. It is important to detect errors before the end user has to deal with them. In this sense, a test is a success when an error is detected."
      },
      {
        "title": "Installation or deployment: ",
        "text": "For this stage, the environment in which the system must operate, both hardware and software, must be planned. In addition, to ensure the correct operation of the system, it is essential to take into account the dependencies that may exist between the different components of the system and their versions."
      },
      {
        "title": "Use and maintenance: ",
        "text": "Typically consumes 40 to 80 percent of a software development company's resources. In fact, at 60 percent on average, it is probably the most important stage of the software lifecycle."
      }
    ]
  },
  "identifiersPage": {
    "title": "Identifiers: variables and constants",
    "paragraph": "Variables and constants are used to store data during the execution of a program.",
    "titleCardVar": "Variable",
    "titleCardConst": "Constant",
    "tableVar": [
      "Variables can be used in programming languages to store different types of data such as numbers, words and strings in the computer's memory.",
      " A variable's value can be modified."
    ],
    "tableConst": [
      "Constants must be assigned a value at the time of declaring the constant.",
      "The value of a constant cannot be changed."
    ]
  },
  "typeOfDataPage": {
    "title": "Type of data",
    "paragraph": "A data type is a means of classifying the type of data that a variable or object can contain in programming. Data types are an important factor in all computer programming languages, including C#, C++, JavaScript and Visual Basic. When programmers develop software, whether desktop or web-based, data types must be assigned and applied correctly to ensure proper results and an error-free program.",
    "paragraph2": "The data type determines which operations can be safely executed to develop, transpose and apply the variable to another calculation."
  },
  "typeOfOperatorsPage": {
    "title": "Type of operators",
    "paragraph": "Expressions perform specific actions, according to an operator, with one or two operands. An operand can be a constant, a variable or the result of a function and can be arithmetic, logical and relational. The functionality of an operator may vary depending on the data type of the operands specified in the expression.",
    "paragraph2": "Test what you learned here",
    "titleList": [
      "Arithmetic operators",
      "Relational operators",
      "Logical operators"
    ],
    "textList1": [
      "They perform mathematical operations, such as addition or subtraction with operands.",
      "There are two types of mathematical operators, unary operators and binary operators.",
      "Unary operators are arithmetic operators that perform an action on a single operand. Example:",
      "A=1;  B = A++; // A will be equal to 1, B will be equal to 2;"
    ],
    "textList2": [
      "Compare the first operand with the second operand to test the validity of the specified relationship.",
      "< : Smaller than",
      "> : Greater than",
      "== : Equal",
      "!= : Diferent",
      "<= : Less than or equal to",
      ">= : Greater than or equal to"
    ],
    "textList3": [
      "They return TRUE (1) or FALSE (0). There are 4 logical operators:",
      "AND: True only if both elements are true.",
      "OR: True if either of the elements is true.",
      "XOR: True if either (but not both) of the expressions is true.",
      "NOT: Changes the value from False to True and vice versa."
    ]
  },
  "sequentialStructurePage": {
    "title": "Sequential Structure",
    "paragraph": "The sequential structure is one in which one action (instruction) follows another in sequence. The tasks follow each other in such a way that the output of one is the input of the next and so on until the end of the process. For example, you have a telephone and you need to call someone but you do not know how to do it:"
  },
  "selectiveStructurePage": {
    "title": "Selective Structure",
    "paragraph": "These are programming statements that allow us to choose between two or more options or paths.",
    "paragraph2": "The simple selective structure, first performs the data reading, then evaluates the logical expression if it is true the following instructions are executed in case the logical expression is false nothing is done and ends the process and only uses the words If then (If, then):",
    "paragraph3": "The compound selective structure has a decision point that evaluates a condition and if true, executes a set of actions and if false executes another set of actions."
  },
  "repetitiveStructurePage": {
    "title": "Repetitive Structures",
    "paragraph": "Repetitive structures are characterized by having an initial starting point, a condition which is responsible for executing a certain number of actions until this condition is invalid (not met). In this sense, repetitive structures are used to perform a certain type of instructions in a finite number of times.",
    "paragraphTitle1": "Sentence While:",
    "paragraph2": "Performs a certain number of actions as long as a condition is met. Unlike the for, it does not necessarily need a counter, but that a certain condition is met, for example, that it is in an interval, that something is greater than another, etc.",
    "paragraphTitle2": "Sentence For:",
    "paragraph3": "This statement is characterized by having a counter, a condition involving this counter and an increment or decrement statement depending on the case."
  },
  "globalVariablesPage": {
    "title": "Global variables",
    "paragraph": "Variables can be global or local. A variable is global unless it is declared within a function definition. The resulting global variables visible and available to all statements in a script. Local variables are only visible and available within the function in which they are defined.",
    "paragraph2": "Although variable names and identifiers must be unique, it is legal to declare a local variable with the same name as a global variable or with the same name as a local variable defined in another function.",
    "paragraph3": "Parameter names of a function definition are considered local variables. Data passed to a function is passed based on value. A global variable that is passed to a function cannot be modified by the function."
  },
  "definedFuntionsPage": {
    "title": "Defined Functions",
    "paragraph": "A function is the way of grouping expressions and sentences (algorithms) that perform certain actions, but these are only executed when they are called. That is to say, when placing an algorithm inside a function, when running the file, the algorithm will not be executed if a reference to the function that contains it has not been made.",
    "paragraph2": "User-defined functions are extensions or additions to existing built-in functions of the language, they are declared with a name followed by parentheses enclosing the arguments (if any).",
    "paragraph3": "There are functions in which a result is expected which is defined within the clause (return)."
  },
  "typeOfDataListPage": {
    "title": "Type of data (List)",
    "paragraph": "A list is a dynamic data structure that contains a collection of homogeneous elements (of the same type) in such a way that an order is established between them. That is, each element, except the first, has a predecessor, and each element, except the last, has a successor. As types of lists, we can divide them according to the organization of the nodes:",
    "list": [
      {
        "title": "Simply linked lists:",
        "text": "Each node has a field pointing to the next node."
      },
      {
        "title": "Double linked lists:",
        "text": "Each node has a pointer pointing to the next node, and another pointer pointing to the previous node."
      },
      {
        "title": "Linear lists:",
        "text": "These are lists that have a beginning and an end."
      },
      {
        "title": "Circular lists:",
        "text": "In these lists the last element points to the first one, therefore we could be always going through them, since they have no end."
      }
    ]
  },
  "operationsPage": {
    "title": "Operations on a list or array",
    "paragraph": "The basic operations that can be performed on any list, regardless of its type, are as follows:",
    "list": [
      {
        "title": "Create:",
        "text": "This operation generates everything necessary to work with a list."
      },
      {
        "title": "Insert:",
        "text": "Allows you to add an item to the list. In this case we must indicate to the program whether we are going to add the new element at the beginning of the list or at the end of the list."
      },
      {
        "title": "Delete:",
        "text": "Will be used to delete an item from the list. We can also indicate whether we want to delete the first or the last one."
      },
      {
        "title": "Empty:",
        "text": "Will return true if the list is empty."
      }
    ],
    "paragraph2": "Other operations can be performed such as destroying the list completely, counting the number of items in the list, adding an item in a certain position, deleting an item from a certain position, checking if there is a data in the list, etc."
  },
  "loopsPage": {
    "title": "Path patterns for repetitive instructions",
    "paragraph": "When working with container structures, the need arises to go through each item that composes it to solve certain problems. The following are the path patterns used to solve most of the problems that arise when coding:",
    "list": [
      {
        "title": "Total Tour Pattern:",
        "text": "On many occasions, to solve a problem that involves a sequence, we need to go through all the elements that it contains to achieve the solution. A practical example of this is calculating how many students passed the course, taking into account that the minimum grade is 3.0",
        "text2": "The characteristic of this route is that it requires all the elements of the structure to be covered in order to achieve the desired objective."
      },
      {
        "title": "Partial Tour Pattern:",
        "text": "Unlike the previous route, in some problems that we face it is not necessary to go through all the elements to achieve our objective, an example of this is to find the first student with a grade equal to 5.0",
        "text2": "In all such cases we do a walkthrough of the fix, but the walkthrough should end as soon as we have resolved the problem. For example, the method that reports if any student got a grade of five in the course must exit the iterative process as soon as it finds the first student with that grade. Only if it doesn't find it will it go to the end of the sequence."
      },
      {
        "title": "Double Tour Pattern:",
        "text": "This pattern is used as a solution to those problems in which, for each element of the sequence, a complete path must be made. This path is mainly used for matrix-type structures, in which it is necessary to go through said structure in both directions.",
        "text2": "To solve a problem with this loop, it is necessary to analyze and identify the problems to be solved, in the case that a third cycle is needed, separate methods must be written to reduce the complexity of the algorithm."
      }
    ]
  },
  "parallelListsPage": {
    "title": "Parallel lists",
    "paragraph": "Two lists are parallel when there is a relationship between the components of the same subscript (same position) of one list and the other.",
    "paragraph2": "Example: We have two lists; in the first one we have names of students and in the second one we have their ages. The list of names is parallel to the list of ages if in component 0 of each list is stored information related to a person (John - 12 years old). In other words, there is a relationship between each component of the two lists.",
    "paragraph3": "This relationship is known only to the programmer and is done to facilitate the development of algorithms that process the data stored in the data structures."
  },
  "bibliographyPage": {
    "title": "Bibliography",
    "list": [
      "Berzal, F. (s. f.). El ciclo de vida de un sistema de informaci√≥n. Recuperado 10 de febrero de 2023, de http://flanagan.ugr.es/docencia/2005-2006/2/apuntes/ciclovida.pdf",
      "Constantes y variables. (2021). ¬© Copyright IBM Corp. 2016. https://www.ibm.com/docs/es/cloud-pak-system-w3500/2.2.5?topic=language-constants-variables",
      "Vital-Carrillo, M. (2019). Estructuras de control para la programaci√≥n. Vida Cient√≠fica, 13. https://www.studocu.com/es-mx/document/universidad-tecnologica-de-la-paz/matematicas/3573-manuscrito-15781-1-10-2018-1128/33359980",
      "Maluenda, R. (2022, 23 junio). Qu√© es un algoritmo inform√°tico: caracter√≠sticas, tipos y ejemplos. Profile Software Services. https://profile.es/blog/que-es-un-algoritmo-informatico/",
      "Mart√≠nez, A. B. (s. f.). ¬øQu√© son variables y constantes? [V√≠deo]. Platzi. https://platzi.com/clases/2218-pensamiento-logico-2020/35187-que-son-variables-constantes-y-tipos-de-datos/",
      "Moisset, D. (s. f.). Listas paralelas. https://www.tutorialesprogramacionya.com/pythonya/detalleconcepto.php?punto=17&codigo=17&inicio=15#:~:text=Podemos%20decir%20que%20dos%20listas,las%20edades%20de%20dichas%20personas",
      "Operadores y expresiones. (2021). ¬© Copyright IBM Corp. 2016. https://www.ibm.com/docs/es/pureapplication-service/2.3.1.0?topic=language-operators-expressions",
      "Universidad de los Andes. (s. f.). Nivel 3 | Manejo de grupos de atributos. Cupi2. https://cupi2.virtual.uniandes.edu.co/libro-del-curso-pdf/nivel-3",
      "Universidad de Pamplona. (s. f.). GUIA # 03 ESTRUCTURAS REPETITIVAS. https://www.unipamplona.edu.co/unipamplona/portalIG/home_77/recursos/documentos/01082019/guia03arduino.pdf",
      "Uniwebsidad, & Bahit, E. (s. f.). Cap√≠tulo 4. Funciones definidas por el usuario (Python para principiantes). uniwebsidad. https://uniwebsidad.com/libros/python/capitulo-4",
      "Urb√°ez, W. (2022, 22 noviembre). Estructuras secuenciales. Desarrollo Web. https://desarrolloweb.com/articulos/2199.php",
      "G√≥mez, F. J., Barrera, J., & Dom√≠nguez Bejarano, L. (s. f.). 3.3. Listas | programaci√≥n avanzada: Estructuras de datos y funciones. http://agrega.juntadeandalucia.es/repositorio/02122016/a5/es-an_2016120212_9131705/33_listas.html",
      "Im√°genes gratuitas. (s. f.). Pixabay. https://pixabay.com/es/images/search/database/?manual_search=1&colors=blue"
    ]
  }
}