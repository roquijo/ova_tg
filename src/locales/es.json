{
  "cortes": [
    "Fundamentos",
    "Estructuras",
    "Arreglos"
  ],
  "corte1": [
    {
      "icon": "mdi-gate-xnor",
      "title": "Fundamentos de la lógica",
      "link": "/fundamentalsView"
    },
    {
      "icon": "mdi-chart-line",
      "title": "Algoritmos",
      "link": "/algorithmsView"
    },
    {
      "icon": "mdi-arrow-u-right-bottom-bold",
      "title": "Ciclo de vida del software",
      "link": "/softwareCycleView"
    },
    {
      "icon": "mdi-identifier",
      "title": "Identificadores",
      "link": "/identifiersView"
    },
    {
      "icon": "mdi-database",
      "title": "Tipos de datos",
      "link": "/typeOfDataView"
    },
    {
      "icon": "mdi-plus-minus-variant",
      "title": "Tipos de operadores",
      "link": "/typeOfOperatorsView"
    },
    {
      "icon": "mdi-vector-arrange-below",
      "title": "Estructura secuencial",
      "link": "/sequentialStructureView"
    },
    {
      "icon": "mdi-arrange-send-backward",
      "title": "Estructura selectiva",
      "link": "/selectiveStructureView"
    }
  ],
  "corte2": [
    {
      "icon": "mdi-chart-line",
      "title": "Estructura repetitiva",
      "link": "/repetitiveStructureView"
    },
    {
      "icon": "mdi-variable",
      "title": "Variables globales",
      "link": "/globalVariablesView"
    },
    {
      "icon": "mdi-function",
      "title": "Funciones definidas",
      "link": "/definedFuntionsView"
    }
  ],
  "corte3": [
    {
      "icon": "mdi-arrange-bring-to-front",
      "title": "Tipo de dato lista",
      "link": "/typeOfDataListView"
    },
    {
      "icon": "mdi-calculator-variant",
      "title": "Operaciones",
      "link": "/operationsView"
    },
    {
      "icon": "mdi-sitemap-outline",
      "title": "Recorridos",
      "link": "/loopsView"
    },
    {
      "icon": "mdi-view-list-outline",
      "title": "Listas paralelas",
      "link": "/parallelListsView"
    },
    {
      "icon": "mdi-bookshelf",
      "title": "Bibliografía",
      "link": "/bibliographyView"
    }
  ],
  "test": "Prueba lo aprendido con la siguiente actividad:",
  "headerSection": {
    "title": "Universidad de Ibagué"
  },
  "principalPage": {
    "title": "Fundamentos de la lógica",
    "paragraph": "La lógica es una ciencia que estudia la estructura o formas del pensamiento humano (como proposiciones, conceptos y razonamientos) para establecer leyes y principios válidos para obtener criterios de verdad.",
    "paragraph2": "La lógica juega un papel importante en la informática (bases de datos, complejidad computacional, lenguajes de programación, inteligencia artificial, diseño y verificación de sistemas hardware y software, etc.) Es sin duda uno de los fundamentos que proporcionan la madurez y agilidad necesarias para asimilar los conceptos, lenguajes, técnicas y herramientas informáticas que surjan en el futuro.",
    "paragraph3": "Prueba lo aprendido hasta ahora con la siguiente actividad:",
    "button": "Aprenda Más"
  },
  "fundamentalsPage": {
    "title": "Fundamentos de la lógica",
    "paragraph": "La lógica es una ciencia que estudia la estructura o formas del pensamiento humano (como proposiciones, conceptos y razonamientos) para establecer leyes y principios válidos para obtener criterios de verdad.",
    "paragraph2": "La lógica juega un papel importante en la informática (bases de datos, complejidad computacional, lenguajes de programación, inteligencia artificial, diseño y verificación de sistemas hardware y software, etc.) Es sin duda uno de los fundamentos que proporcionan la madurez y agilidad necesarias para asimilar los conceptos, lenguajes, técnicas y herramientas informáticas que surjan en el futuro.",
    "paragraph3": "Prueba lo aprendido hasta ahora con la siguiente actividad:"
  },
  "algorithmPage": {
    "title": "Algoritmos",
    "paragraph": "Un algoritmo es un conjunto de instrucciones definidas, ordenadas y acotadas para resolver un problema, realizar un cálculo o desarrollar una tarea a partir de un estado e información iniciales, se siguen una serie de pasos ordenados para llegar a la solución de una situación. Utilizamos numerosos algoritmos para resolver problemas en nuestra vida cotidiana como, por ejemplo: ",
    "paragraph2": "Un algoritmo informático parte de un estado inicial y de unos valores de entrada, sigue una serie de pasos sucesivos y llega a un estado final en el que ha obtenido una solución. En este sentido las tres partes de un algoritmo son: ",
    "paragraphTitleList1": "Input (entrada).",
    "paragraphTitleList2": "Proceso.",
    "paragraphTitleList3": "Output (salida).",
    "paragraphList1": "Información que damos al algoritmo con el que va a trabajar para ofrecer la solución esperada. ",
    "paragraphList2": "Conjunto de pasos para que, a partir de los datos de entrada, llegue a la solución de la situación. ",
    "paragraphList3": "Resultados, a partir de la transformación de los valores de entrada durante el proceso. "
  },
  "softwareLifeCyclePage": {
    "title": "Ciclo de vida del software y Proceso de análisis y diseño para la solución de problemas",
    "paragraph": "En 1945, el matemático George Polya escribió el primer libro que describe la utilización de técnicas heurísticas en la resolución de problemas. En dicho libro llamado How to solve it, se presentan las etapas que son un reflejo del proceso que se sigue a la hora de resolver cualquier tipo de problema. Estas etapas son:",
    "list": [
      "Comprender el problema (análisis)",
      "Plantear una posible solución, considerando soluciones alternativas (diseño)",
      "Llevar a cabo la solución planteada (implementación)",
      "Comprobar que el resultado obtenido es correcto (pruebas)"
    ],
    "paragraph2": "Con lo anterior, cualquier software va pasando por una serie de fases a lo largo de su vida. Su ciclo de vida comprende una serie de etapas entre las que se encuentran las etapas para el proceso de análisis y diseño para la solución de problemas y las siguientes:",
    "list2": [
      {
        "title": "Planificación: ",
        "text": "En esta fase inicial de cualquier proyecto se incluyen actividades como la determinación del ámbito del proyecto, la realización de un estudio de viabilidad, el análisis de los riesgos asociados al proyecto, una estimación del coste del proyecto, su planificación temporal y la asignación de recursos a las distintas etapas del proyecto."
      },
      {
        "title": "Análisis: ",
        "text": "Es el proceso mediante el cual se intenta descubrir qué es lo que realmente se necesita y se llega a una comprensión adecuada de los requerimientos del sistema. Esta etapa es de gran importancia debido a que si no se sabe con precisión qué es lo que se necesita, no se podrá realizar el proceso de desarrollo."
      },
      {
        "title": "Diseño: ",
        "text": "Los modelos que se utilizan en la fase de diseño representan las características del sistema que nos permitirán implementarlo de forma efectiva, en otras palabras en esta etapa se define el cómo se hará el desarrollo y lo que se implementará para realizar el mismo. El diseño es una etapa compleja y el proceso de diseño ha de realizarse de forma iterativa."
      },
      {
        "title": "Implementación: ",
        "text": "Antes de empezar a escribir una línea de código o de crear una tabla en nuestra base de datos, es de gran importancia haber comprendido bien el problema que se pretende resolver y haber aplicado principios básicos de diseño que nos permitan construir un software de calidad. Para esta fase, se deben seleccionar las herramientas adecuadas, un entorno de desarrollo que facilite el trabajo y un lenguaje de programación apropiado para el tipo de sistema que se vaya a construir. La elección de estas herramientas dependerá en gran parte de las decisiones de diseño que se hayan tomado."
      },
      {
        "title": "Pruebas: ",
        "text": "En esta etapa se tiene como objetivo detectar los errores que se hayan podido cometer en las etapas anteriores del proyecto y corregirlos. Es importante detectar los errores antes de que el usuario final tenga que enfrentarse a ellos. En ese sentido, una prueba es un éxito cuando se detecta un error."
      },
      {
        "title": "Instalación o despliegue: ",
        "text": "Para esta etapa se debe planificar el entorno en el que el sistema debe funcionar, tanto hardware como software. Además, para asegurar el correcto funcionamiento del sistema, resulta esencial que se tengan en cuenta las dependencias que pueden existir entre los distintos componentes del sistema y sus versiones."
      },
      {
        "title": "Uso y mantenimiento: ",
        "text": "Consume típicamente del 40 al 80 por ciento de los recursos de una empresa de desarrollo de software. De hecho, con un 60% de media, es probablemente la etapa más importante del ciclo de vida del software."
      }
    ]
  },
  "identifiersPage": {
    "title": "Identificadores: variables y constantes",
    "paragraph": "Las variables y constantes permiten almacenar datos durante la ejecucion de un programa.",
    "titleCardVar": "Variable",
    "titleCardConst": "Constante",
    "tableVar": [
      "Se pueden usar variables en los lenguajes de programacion para almacenar diferentes tipos de datos como numeros, palabras y cadenas en la memoria del ordenador.",
      "El valor de una variable puede ser modificada."
    ],
    "tableConst": [
      "A las constantes se les debe asignar un valor al momento de declararlas.",
      "El valor de una constante no puede ser modificada."
    ]
  },
  "typeOfDataPage": {
    "title": "Tipos de datos",
    "paragraph": "Un tipo de datos es un medio de clasificar el tipo de datos que una variable u objeto puede contener en la programación. Los tipos de datos son un factor importante en todos los lenguajes de programación en informática, incluyendo C#, C++, JavaScript y Visual Basic. Cuando los programadores desarrollan software, ya sea de escritorio o basado en la web, los tipos de datos deben asignarse y aplicarse correctamente para garantizar resultados adecuados y un programa libre de errores.",
    "paragraph2": "El tipo de datos determina qué operaciones pueden ejecutarse con seguridad para desarrollar, transponer y aplicar la variable a otro cálculo."
  },
  "typeOfOperatorsPage": {
    "title": "Tipos de operadores",
    "paragraph": "Las expresiones realizan acciones específicas, según un operador, con uno o dos operadores. Un operando puede ser una constante, una variable o el resultado de una función y pueden ser aritméticos, lógicos y relacionales. La funcionalidad de un operador puede variar según el tipo de datos de los operandos especificados en la expresión.",
    "paragraph2": "Prueba lo aprendido aquí",
    "titleList": [
      "Operadores aritméticos",
      "Operadores relacionales",
      "Operadores lógicos"
    ],
    "textList1": [
      "Realizan operaciones matemáticas, como sumas o restas con operandos.",
      "Hay dos tipos de operadores matemáticos, los operadores unarios y los operadores binarios.",
      "Los operadores unarios son operadores aritméticos que realizan una acción sobre un solo operando. Ejemplo:",
      "A = 1;  B = A++; // A será igual a 1, B será igual a 2;"
    ],
    "textList2": [
      "Comparan el primer operando con el segundo para probar la validez de la relación especificada.",
      "< : Menor que",
      "> : Mayor que",
      "== : Igual",
      "!= : Diferente",
      "<= : Menor o Igual que",
      ">= : Mayor o Igual que"
    ],
    "textList3": [
      "Devuelven el valor TRUE (1) o FALSE (0). Se tienen 4 operadores lógicos:",
      "AND: Verdadero sólo si los dos elementos son verdaderos.",
      "OR: Verdadero si cualquiera de los elementos es verdadero.",
      "XOR: Verdadero si cualquiera de las expresiones (pero no ambas) es verdadera.",
      "NOT: Cambia el valor de Falso a Verdadero y viceversa."
    ]
  },
  "sequentialStructurePage": {
    "title": "Estructura secuencial",
    "paragraph": "La estructura secuencial es aquella en la que una acción (instrucción) sigue a otra en secuencia. Las tareas se suceden de tal modo que la salida de una es la entrada de la siguiente y así sucesivamente hasta el fin del proceso. Por ejemplo, se tiene un teléfono y se necesita llamar a alguien pero no se sabe cómo hacerlo:"
  },
  "selectiveStructurePage": {
    "title": "Estructura selectiva",
    "paragraph": "Son sentencias de programación que nos permiten elegir entre dos a más opciones o caminos.",
    "paragraph2": "La estructura selectiva simple, primero realiza la lectura de datos, posteriormente evalúa la expresión lógica si esta es verdadera se ejecutan las siguientes instrucciones en caso de que la expresión lógica se falsa no se realiza nada y termina el proceso y solo utiliza las palabras de Si entonces (If, then):",
    "paragraph3": "La estructura selectiva compuesta tiene un punto de decisión que evalúa una condición y si es verdadero, ejecuta un conjunto de acciones y si es falso ejecuta otro conjunto de acciones."
  },
  "repetitiveStructurePage": {
    "title": "Estructuras Repetitivas",
    "paragraph": "Las estructuras repetitivas se caracterizan por tener un punto inicial de partida, una condición la cual se encarga de ejecutar un número determinado de acciones hasta que esta condición no sea válida (no se cumpla). En este sentido, las estructuras repetitivas se utilizan para realizar un determinado tipo de instrucciones en un número finito de veces.",
    "paragraphTitle1": "Sentencia Mientras (while):",
    "paragraph2": "Realiza cierto número de acciones mientras se cumpla una condición. A diferencia del for, no necesariamente necesita un contador, sino que se cumpla una determinada condición ya sea, por ejemplo, que esté en un intervalo, que algo sea mayor que otro etc.",
    "paragraphTitle2": "Sentencia Para (For):",
    "paragraph3": "Esta sentencia se caracteriza por tener un contador, una condición que involucra este contador y una sentencia de incremento o decremento dependiendo el caso."
  },
  "globalVariablesPage": {
    "title": "Variables globales",
    "paragraph": "Las variables pueden ser globales o locales. Una variable es global a no ser que esté declarada dentro de una definición de función. Las variables globales resultan visibles y disponibles para todas las sentencias de un script. Las variables locales sólo resultan visibles y disponibles dentro de la función en la que están definidas.",
    "paragraph2": "Aunque los nombres de variables y los identificadores deben ser exclusivos, resulta válido declarar una variable local con el mismo nombre que una variable global o con el mismo nombre que una variable local definida en otra función.",
    "paragraph3": "Los nombres de parámetros de una definición de función se consideran variables locales. Los datos que se pasan a una función se pasan según el valor. Una variable global que se pasa a una función no puede ser modificada por la función."
  },
  "definedFuntionsPage": {
    "title": "Funciones Definidas",
    "paragraph": "Una función, es la forma de agrupar expresiones y sentencias (algoritmos) que realicen determinadas acciones, pero que éstas, solo se ejecuten cuando son llamadas. Es decir, que al colocar un algoritmo dentro de una función, al correr el archivo, el algoritmo no será ejecutado si no se ha hecho una referencia a la función que lo contiene.",
    "paragraph2": "Las funciones definidas por el usuario son extensiones o adiciones a las funciones incorporadas ya existentes del lenguaje, se declaran con un nombre seguido de parentesis que encierran los argumentos (si los hay)",
    "paragraph3": "Existen funciones en las cuales se espera un resultado el cual es definido dentro de la clausula (return)"
  },
  "typeOfDataListPage": {
    "title": "Tipo de dato lista",
    "paragraph": "Una lista es una estructura dinámica de datos que contiene una colección de elementos homogéneos (del mismo tipo) de manera que se establece entre ellos un orden. Es decir, cada elemento, menos el primero, tiene un predecesor, y cada elemento, menos el último, tiene un sucesor. Como tipos de listas, podemos dividir teniendo en cuenta la organización de los nodos:",
    "list": [
      {
        "title": "Listas simplemente enlazadas:",
        "text": "Cada nodo tiene un campo que apunta al siguiente nodo."
      },
      {
        "title": "Listas doblemente enlazadas:",
        "text": "Cada nodo dispone de un puntero que apunta al siguiente nodo, y otro que apunta al nodo anterior."
      },
      {
        "title": "Listas lineales:",
        "text": "Son listas que tienen un comienzo y un final."
      },
      {
        "title": "Listas circulares:",
        "text": "En estas listas el último elemento apunta al primero, por lo tanto, las podríamos recorrer siempre, ya que no tienen final."
      }
    ]
  },
  "operationsPage": {
    "title": "Operaciones con una lista o arreglo",
    "paragraph": "Las operaciones básicas que podemos realizar en cualquier lista, independiente del tipo que sea, son la siguientes:",
    "list": [
      {
        "title": "Crear:",
        "text": "Con esta operación se genera todo lo necesario para trabajar con una lista."
      },
      {
        "title": "Insertar:",
        "text": "Permite añadir un elemento a la lista. En este caso debemos indicar al programa si vamos a añadir el elemento nuevo al comienzo de la lista o al final de la misma."
      },
      {
        "title": "Eliminar:",
        "text": "Se usará para borrar un elemento de la lista. También podremos indicar si queremos borrar el primero o el último."
      },
      {
        "title": "Vacía:",
        "text": "Devolverá cierto si la lista está vacía."
      }
    ],
    "paragraph2": "Se podrán realizar otras operaciones como destruir la lista completamente, contar el número de elementos de la misma, añadir un elemento en una determinada posición, borrar un elemento de una determinada posición, comprobar si hay un dato en la lista, etc."
  },
  "loopsPage": {
    "title": "Patrones de recorridos para instrucciones repetitivas",
    "paragraph": "Cuando se trabaja con estructuras contenedoras, surge la necesidad de recorrer cada ítem que la compone para resolver ciertos problemas, a continuación se presentan los patrones de recorrido utilizados para resolver la mayoría de problemas que surgen al momento de codificar:",
    "list": [
      {
        "title": "Patrón de Recorrido Total:",
        "text": "En muchas ocasiones, para resolver un problema que involucra una secuencia, necesitamos recorrer todos los elementos que ésta contiene para lograr la solución, un ejemplo práctico de esto es calcular cuántos estudiantes aprobaron la asignatura teniendo en cuenta que la nota mínima es de 3.0",
        "text2": "La característica que posee este recorrido es que requiere que se recorran todos los elementos de la estructura para poder cumplir con el objetivo buscado."
      },
      {
        "title": "Patrón de Recorrido Parcial:",
        "text": "A diferencia del recorrido anterior, en algunos problemas que nos enfrentamos no es necesario recorrer todos los elementos para lograr nuestro objetivo, un ejemplo de ello es buscar el primer estudiante con una nota igual a 5.0",
        "text2": "En todos esos casos hacemos un recorrido del arreglo, pero éste debe terminar tan pronto hayamos resuelto el problema. Por ejemplo, el método que informa si algún estudiante obtuvo cinco en la nota del curso debe salir del proceso iterativo tan pronto localice el primer estudiante con esa nota. Sólo si no lo encuentra, va a llegar hasta el final de la secuencia."
      },
      {
        "title": "Patrón de Doble Recorrido:",
        "text": "Este patrón se utiliza como solución de aquellos problemas en los cuales, por cada elemento de la secuencia, se debe hacer un recorrido completo, este recorrido se utiliza mayormente para estructuras de tipo matriz, en el cual es necesario recorrer en ambos sentidos dicha estructura.",
        "text2": "Para resolver un problema con este recorrido, es necesario analizar e identificar los problemas que se quieren resolver, en el caso que se necesite un tercer ciclo, se deben escribir métodos separados para disminuir la complejidad del algoritmo."
      }
    ]
  },
  "parallelListsPage": {
    "title": "Listas paralelas",
    "paragraph": "Dos listas son paralelas cuando hay una relación entre las componentes de igual subíndice (misma posición) de una lista y otra.",
    "paragraph2": "Ejemplo: Se tienen dos listas; en la primera se tienen nombres de alumnos y en la segunda las edades de estos. La lista de nombres es paralela a la lista edades, ya que en el componente 0 de cada lista se almacena información relacionada a una persona (Juan - 12 años). Es decir, hay una relación entre cada componente de las dos listas.",
    "paragraph3": "Esta relación la conoce únicamente el programador y se hace para facilitar el desarrollo de algoritmos que procesan los datos almacenados en las estructuras de datos."
  },
  "bibliographyPage": {
    "title": "Bibliografía",
    "list": [
      "Berzal, F. (s. f.). El ciclo de vida de un sistema de información. Recuperado 10 de febrero de 2023, de http://flanagan.ugr.es/docencia/2005-2006/2/apuntes/ciclovida.pdf",
      "Constantes y variables. (2021). © Copyright IBM Corp. 2016. https://www.ibm.com/docs/es/cloud-pak-system-w3500/2.2.5?topic=language-constants-variables",
      "Vital-Carrillo, M. (2019). Estructuras de control para la programación. Vida Científica, 13. https://www.studocu.com/es-mx/document/universidad-tecnologica-de-la-paz/matematicas/3573-manuscrito-15781-1-10-2018-1128/33359980",
      "Maluenda, R. (2022, 23 junio). Qué es un algoritmo informático: características, tipos y ejemplos. Profile Software Services. https://profile.es/blog/que-es-un-algoritmo-informatico/",
      "Martínez, A. B. (s. f.). ¿Qué son variables y constantes? [Vídeo]. Platzi. https://platzi.com/clases/2218-pensamiento-logico-2020/35187-que-son-variables-constantes-y-tipos-de-datos/",
      "Moisset, D. (s. f.). Listas paralelas. https://www.tutorialesprogramacionya.com/pythonya/detalleconcepto.php?punto=17&codigo=17&inicio=15#:~:text=Podemos%20decir%20que%20dos%20listas,las%20edades%20de%20dichas%20personas",
      "Operadores y expresiones. (2021). © Copyright IBM Corp. 2016. https://www.ibm.com/docs/es/pureapplication-service/2.3.1.0?topic=language-operators-expressions",
      "Universidad de los Andes. (s. f.). Nivel 3 | Manejo de grupos de atributos. Cupi2. https://cupi2.virtual.uniandes.edu.co/libro-del-curso-pdf/nivel-3",
      "Universidad de Pamplona. (s. f.). GUIA # 03 ESTRUCTURAS REPETITIVAS. https://www.unipamplona.edu.co/unipamplona/portalIG/home_77/recursos/documentos/01082019/guia03arduino.pdf",
      "Uniwebsidad, & Bahit, E. (s. f.). Capítulo 4. Funciones definidas por el usuario (Python para principiantes). uniwebsidad. https://uniwebsidad.com/libros/python/capitulo-4",
      "Urbáez, W. (2022, 22 noviembre). Estructuras secuenciales. Desarrollo Web. https://desarrolloweb.com/articulos/2199.php",
      "Gómez, F. J., Barrera, J., & Domínguez Bejarano, L. (s. f.). 3.3. Listas | programación avanzada: Estructuras de datos y funciones. http://agrega.juntadeandalucia.es/repositorio/02122016/a5/es-an_2016120212_9131705/33_listas.html",
      "Imágenes gratuitas. (s. f.). Pixabay. https://pixabay.com/es/images/search/database/?manual_search=1&colors=blue"
    ]
  }
}